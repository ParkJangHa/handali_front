import React, { useState } from "react";
import { View, Text, TouchableOpacity, StyleSheet, Dimensions, Image, FlatList, Modal,TouchableWithoutFeedback } from "react-native";
import Slider from "@react-native-community/slider";
import DateTimePicker from "@react-native-community/datetimepicker";

const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get("window");

export default function HabitDetailScreen({ route, navigation }) {
    //Ïπ¥ÌÖåÍ≥†Î¶¨
    const { categoryType } = route.params;

    //ÏÑ∏Î∂ÄÏäµÍ¥Ä
    const [habits, setHabits] = useState([{ habit_id: 1, detailed_habit_name: 'Ìó¨Ïä§Ïû• Í∞ÄÍ∏∞' },
    { habit_id: 2, detailed_habit_name: 'Îß§Ïùº 30Î∂Ñ Í±∑Í∏∞' },
    { habit_id: 3, detailed_habit_name: 'Ïä§Ìä∏Î†àÏπ≠ ÌïòÍ∏∞' },
    { habit_id: 4, detailed_habit_name: 'Î™ÖÏÉÅ 10Î∂Ñ' },
    { habit_id: 5, detailed_habit_name: 'ÏöîÍ∞Ä Ïó∞Ïäµ' },
    ]);
    // const [habits, setHabits] = useState();
    const [selectedHabit, setSelectedHabit] = useState(null);

    // ÏäµÍ¥ÄÏãúÍ∞ÑÍ∏∞Î°ù
    const [time, setTime] = useState(() => {
        const initialTime = new Date();
        initialTime.setHours(0); // ÏãúÍ∞Ñ 0 ÏÑ§Ï†ï
        initialTime.setMinutes(0); // Î∂Ñ 0 ÏÑ§Ï†ï
        return initialTime;
    });
    const [showPicker, setShowPicker] = useState(false);

    const onChange = (event, selectedTime) => {
        const currentDate = selectedTime;
        setShowPicker(true);
        setTime(currentDate); // ÏÑ†ÌÉùÎêú ÏãúÍ∞Ñ Ï†ÄÏû•
    };

    //ÎßåÏ°±ÎèÑ
    const [satisfaction, setSatisfaction] = useState(50);
    // ÎèôÏ†Å Ïä§ÌÉÄÏùº Ìï®Ïàò (3ÏÉâ Î∂ÑÍ∏∞)
    const dynamicTextColor = (satisfaction) => {
        if (satisfaction == 100) {
            return { color: '#55d406' }
        }
        else if (satisfaction >= 75) {
            return { color: '#FF9730' };
        } else if (satisfaction >= 50) {
            return { color: 'black' };
        } else {
            return { color: '#a8b7a8' };
        }
    };

    return (
        <View style={styles.container}>

            <View style={styles.backButton}>
                <TouchableOpacity
                    onPress={() => { navigation.goBack() }}>
                    <Image
                        source={require('../assets/backButton.png')}>
                    </Image>
                </TouchableOpacity>
            </View>

            <View style={styles.containerRecord}>

                <View style={styles.categoryName}>
                    <Text style={styles.categoryNameText}>{categoryType}</Text>
                </View>

                <View style={styles.detailHabitCon}>
                    <View style={styles.labels}>
                        <Text style={styles.labelsText}>ÏÑ∏Î∂ÄÏäµÍ¥Ä</Text>
                    </View>

                    <View>
                        <FlatList
                            data={habits}
                            keyExtractor={(item, index) => index.toString()} // Í≥†Ïú† keyÎ°ú index ÏÇ¨Ïö©
                            renderItem={({ item }) => (
                                <TouchableOpacity
                                    style={[styles.detailHabitButton,
                                    selectedHabit === item.detailed_habit_name && styles.selectedButton]}
                                    onPress={() => {
                                        setSelectedHabit(item.detailed_habit_name)
                                    }}>
                                    <Text style={styles.contentText}>{item.detailed_habit_name}</Text>
                                </TouchableOpacity>
                            )}
                            ListEmptyComponent={
                                <Text style={styles.contentText}>ÏÑ∏Î∂ÄÏäµÍ¥ÄÏù¥ ÏóÜÏäµÎãàÎã§.</Text>
                            }
                            // contentContainerStyle={styles.scrollContent}
                            style={styles.scrollView} //ÌïúÎ≤àÏóê Î™áÍ∞úÏî© Î≥¥ÏùºÏßÄ
                        />
                    </View>


                </View>


                <View style={styles.habitTimeCon}>
                    <View style={styles.labels}>
                        <Text style={styles.labelsText}>ÏäµÍ¥ÄÏãúÍ∞Ñ</Text>
                    </View>

                    <TouchableOpacity onPress={() => setShowPicker(true)} style={styles.timeButton}>
                        <View>
                            <Text style={styles.contentText} >{time.getHours()}ÏãúÍ∞Ñ {time.getMinutes()}Î∂Ñ</Text>
                        </View>
                    </TouchableOpacity>

                    <Modal
                        visible={showPicker}
                        transparent={true} // Î∞∞Í≤ΩÏùÑ Ìà¨Î™ÖÌïòÍ≤å
                        animationType="slide"
                        onRequestClose={() => setShowPicker(false)} // ÏïàÎìúÎ°úÏù¥Îìú Îí§Î°úÍ∞ÄÍ∏∞ ÏßÄÏõê
                    >
                    {/* üõ† Î™®Îã¨ Î∞îÍπ•ÏùÑ ÌÑ∞ÏπòÌïòÎ©¥ Îã´ÌûàÎèÑÎ°ù ÏÑ§Ï†ï */}
                        <TouchableWithoutFeedback onPress={() => setShowPicker(false)}>
                            <View style={styles.modalContainer}>
                                    {/* üõ† DateTimePicker */}
                                    <DateTimePicker
                                        value={time}
                                        mode="time"
                                        locale="en-GB"
                                        display="spinner"
                                        onChange={(event, selectedTime) => {
                                            if (selectedTime) setTime(selectedTime); // ÏÑ†ÌÉùÎêú ÏãúÍ∞Ñ Ï†ÄÏû•
                                            setShowPicker(false); // ÏÑ†ÌÉù ÌõÑ Î™®Îã¨ Îã´Í∏∞
                                        }}
                                    />
                            </View>
                        </TouchableWithoutFeedback>
                    </Modal>

                </View>



                <View style={styles.satisfactionCon}>
                    <View style={styles.labels}>
                        <Text style={styles.labelsText}>ÏÑ±Ï∑®ÎßåÏ°±ÎèÑ </Text>
                        <Text style={[dynamicTextColor(satisfaction), styles.labelsText]}>{satisfaction}</Text>
                    </View>

                    <Slider
                        thumbTintColor="black"
                        minimumTrackTintColor="#FF9730" // ÏµúÏÜå Ìä∏Îûô ÏÉâÏÉÅ
                        maximumTrackTintColor="#ddd"
                        minimumValue={0}
                        maximumValue={100}
                        step={5}
                        value={satisfaction}
                        onValueChange={(value) => setSatisfaction(value)
                        }
                    />

                </View>

                <View style={styles.recordCon}>
                    <TouchableOpacity
                        style={styles.recordButton}
                        onPress={() => {
                            if (selectedHabit) {
                                navigation.navigate('HabitCheck', {
                                    categoryName: categoryType,
                                    detailedHabit: selectedHabit,
                                    habitTime: `${time.getHours()}ÏãúÍ∞Ñ ${time.getMinutes()}Î∂Ñ`,
                                    satisfaction: satisfaction,
                                });
                            } else {
                                alert('ÏÑ∏Î∂ÄÏäµÍ¥ÄÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî!');
                            }

                        }}>
                        <Text style={styles.recordText}>Í∏∞Î°ùÌïòÍ∏∞</Text>
                    </TouchableOpacity>
                </View>
            </View>
        </View>
    );
}



const styles = StyleSheet.create({
    //container
    container: {
        flex: 1,
        backgroundColor: "#FF9730"
    },
    backButton: {
        marginTop: SCREEN_HEIGHT * 0.06,
        marginLeft: SCREEN_WIDTH * 0.06,
        // backgroundColor: 'pink'
    },
    containerRecord: {
        flex: 1,
        backgroundColor: "#FFF5DA",
        borderTopLeftRadius: 50,
        borderTopRightRadius: 50
        , padding: SCREEN_HEIGHT * 0.04,
        marginTop: SCREEN_HEIGHT * 0.03,
    },





    //in containerRecord
    categoryName: {
        flex: 0.1,
        marginBottom: SCREEN_HEIGHT * 0.03,
        // backgroundColor: 'yellow',
    },
    // labels: {
    //     // backgroundColor: 'green',

    // },
    detailHabitCon: {
        flex: 0.5,
        marginBottom: SCREEN_HEIGHT * 0.03,
    },
    habitTimeCon: {
        flex: 0.3,
        marginBottom: SCREEN_HEIGHT * 0.03,
        // backgroundColor: 'skyblue'
    },
    satisfactionCon: {
        flex: 0.3,
        marginBottom: SCREEN_HEIGHT * 0.03,
        // backgroundColor: 'orange'
    },
    recordCon: {
        flex: 0.2,
        justifyContent: 'center',
        // backgroundColor: 'skyblue'
    },

    //in detailHabitCon
    scrollView: {
        maxHeight: SCREEN_HEIGHT * 0.15
    },


    //in habitTimeCon
    modalContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'rgba(0, 0, 0, 0.5)', // Î∞òÌà¨Î™Ö Î∞∞Í≤Ω
    },
    pickerContainer: {
        width: SCREEN_WIDTH * 0.8,
        backgroundColor: '#FFF5DA',
        borderRadius: 20,
        padding: 20,
        alignItems: 'center',
    },

    //button
    detailHabitButton: {
        backgroundColor: "#FFC387",
        opacity: 0.8,
        padding: SCREEN_HEIGHT * 0.02,
        marginVertical: SCREEN_HEIGHT * 0.01,
        borderRadius: 20,
        alignItems: "center",
    },
    selectedButton: {
        backgroundColor: "#FF8000", // ÏÑ†ÌÉùÎêú Î≤ÑÌäº Ïä§ÌÉÄÏùº
    },
    recordButton: {
        backgroundColor: "black",
        padding: SCREEN_HEIGHT * 0.02,
        borderRadius: 30,
        alignItems: "center",
    },
    timeButton: {
        backgroundColor: "#FFC387",
        opacity: 0.8,
        padding: SCREEN_HEIGHT * 0.02,
        marginVertical: SCREEN_HEIGHT * 0.01,
        borderRadius: 20,
        alignItems: "center",
    },
    timeModalButton: {
        backgroundColor: "black",
        width: "100%",
        borderRadius: 20,
        padding: 12,
    },

    //text
    categoryNameText: {
        fontSize: SCREEN_WIDTH * 0.075,
        fontWeight: 'bold'
    },
    labelsText: {
        fontSize: SCREEN_WIDTH * 0.05,
        fontWeight: 'bold'
    },
    recordText: {
        fontSize: SCREEN_WIDTH * 0.05,
        fontWeight: 'bold',
        color: 'white'
    },
    contentText: {
        fontSize: SCREEN_WIDTH * 0.05,
    },
    modalText: {
        fontSize: SCREEN_WIDTH * 0.05,
        color: 'white',
        alignSelf: 'center'
    }

});
